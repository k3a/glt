
uniform mat4 uView;
uniform mat4 uModelView;
uniform mat4 uModelViewProj;
uniform mat4 uProj;
uniform mat4 uIProj;
uniform vec2 uNearFar;
uniform vec2 uScreenSize;
uniform vec2 uTanFovAspect; // aspect*tan(fov/2), tan(fov/2) - used for view-space pixel position reconstruction

#ifdef VS

attribute vec4 aPosition;
attribute vec4 aColor0;
attribute vec2 aCoords0;
attribute vec3 aNormal;
attribute vec3 aTangent;
attribute vec3 aBitangent;
attribute vec3 aProjVec;

# define VSOutput gl_Position

#else // FS

// generic textures
uniform sampler2D uTex0;
uniform vec2 uInvTex0Size;
uniform sampler2D uTex1;
uniform vec2 uInvTex1Size;
uniform sampler2D uTexNormalSpecular;
// fullscreen gbuffer
uniform sampler2D uNormalTex;
uniform sampler2D uDepthTex;

#ifdef MRT
# define FSOutput(idx) gl_FragData[idx]
#else
# define FSOutput(idx) gl_FragColor
#endif

#endif // VS or FS


vec4 YellowColor(float blue)
{
    return vec4(1,1,blue,1);
}


//TODO: other normal encodings http://aras-p.info/texts/CompactNormalStorage.html

vec3 PackNormal(vec3 normal)
{
#ifdef NORMAL_ENCODE_SPHEREMAP
	float p = sqrt(normal.z*8.0+8.0);
    return vec3(normal.xy/p + 0.5,0);
#else
    return normal * 0.5 + 0.5;
#endif
}

vec3 UnpackNormal(vec3 normal)
{
#ifdef NORMAL_ENCODE_SPHEREMAP
    vec2 fenc = normal.xy*4.0-2.0;
    float f = dot(fenc,fenc);
    float g = sqrt(1.0-f/4.0);
    vec3 n;
    n.xy = fenc*g;
    n.z = 1.0-f/2.0;
    return n;
#else
    return normal * 2.0 - 1.0;
#endif
}

vec2 clip_to_screenUV(vec4 pos)
{
    return pos.xy/pos.w * 0.5 + 0.5;
}

vec3 ReconstructViewspacePos(vec2 screenUV, float depthEye)
{
    // apply perspective offset
    return vec3( uTanFovAspect * (screenUV * 2.0 - 1.0) * depthEye, -depthEye);
}


float saturate(float val)
{
    return clamp(val, 0.0, 1.0);
}

vec2 saturate(vec2 val)
{
    return clamp(val, 0.0, 1.0);
}
vec3 saturate(vec3 val)
{
    return clamp(val, 0.0, 1.0);
}
vec4 saturate(vec4 val)
{
    return clamp(val, 0.0, 1.0);
}


float PhongSpecular(vec3 L, vec3 N, vec3 V, float power)
{
    float specularInp = dot(reflect(L, N), V);
    return pow(max(0.0, specularInp), power);
}

float BlinnSpecular(vec3 L, vec3 N, vec3 V, float power)
{
    vec3 halfV = normalize(L-V);
    float specularInp = dot(N, halfV);
    return pow(max(0.0, specularInp), power);
}


// http://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner
float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

